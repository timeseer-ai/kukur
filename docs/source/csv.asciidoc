// SPDX-FileCopyrightText: 2021 Timeseer.AI
//
// SPDX-License-Identifier: Apache-2.0
== CSV

Sources with `type = "csv"` configure CSV sources.

```toml
[source.<name>]
type = "csv"
path = "<path>"
metadata = "<path>"
metadata_mapping = "<name>"
metadata_value_mapping ="<name>"
format = "row|pivot|dir"
dictionary_dir = "<path>"
quality_mapping = "<name>"
```

`path` is required for time series sources.
It is optional when used as a metadata source.

Three CSV data models are supported:
- row based (series name, timestamp, value, quality (optional))
- pivot (multiple series with values at the same timestamp)
- directory based, one CSV file per tag

=== Row Based Format

A row based CSV data file does not contain a header row.
At least 3 columns are present:

- series name
- timestamp in RFC3339 format (up to nanosecond precision)
- numerical value (up to double precision floating point)

Example:

```csv
test-tag-1,2020-01-01T00:00:00Z,1
test-tag-1,2020-02-01T00:00:00Z,2
test-tag-2,2020-01-01T00:00:00Z,Product A
test-tag-2,2020-02-01T00:00:00Z,Product B
```

Alternatively, the third column can contain string values.
It is not possible to mix numerical and string values in one column.
This will cause all numerical values to be interpreted as strings.

Dictionary data is integer numerical data.
Labels are only for presenting to users.

=== Pivot Format

The header row of CSV data files in pivot format defines which time series are available.

Other rows start with a timestamp in RFC3339 format and contain one value for each series.

```csv
timestamp,test-tag-1,test-tag-2
2020-01-01T00:00:00Z,1,10
2020-02-01T00:00:00Z,2,11
```

=== Directory Based Format

The directory based format expects one CSV file per tag.
CSV files are formatted in the row based format, but without the series name.
They are named `<series name>.csv`.

`path` refers to the directory that contains the CSV files.

Example `test-tag-1.csv`:

```csv
2020-01-01T00:00:00Z,1
2020-02-01T00:00:00Z,2
```

=== Metadata

Metadata is configured in a matrix format.
A header row describes the metadata entry.

Supported types of metadata are:

- `series name` (required)
- `description`
- `unit`
- `lower limit`
- `upper limit`
- `accuracy`
- `interpolation type` (`LINEAR`, `STEPPED`)
- `data type` (`FLOAT32`, `FLOAT64`, `STRING`, `DICTIONARY`, `CATEGORICAL`)
- `dictionary name`
- `process type` (`CONTINUOUS`, `REGIME`, `BATCH`, `COUNTER`)

Not all columns need to be present.
Extra columns will be ignored.

Example:

```csv
series name,unit,lower limit,upper limit,accuracy
test-tag-1,m,0,1,0.1
```

When the dictionary name field is present, the directory given in `dictionary_dir`
is searched for a file `<dictionary name>.csv`.
This file contains a comma separated mapping of numerical values to labels.

Example:

```csv
0,OFF
1,ON
```

Columns in a metadata CSV often do not match the names of metadata fields in Kukur.
An optional `metadata_mapping` maps Kukur field names to column names.

Example:

```toml
[source.<name>]
metadata_mapping = "ip21"

[metadata_mapping.ip21]
"series name" = "NAME"
description = "IP_DESCRIPTION"
unit = "IP_ENG_UNITS"
```

Where the metadata CSV contains:

```csv
NAME,IP_ENG_UNITS,lower limit
test-tag-1,kg,1
```

Fields that are not included in the mapping,
such as `lower limit` in the example,
translate to the corresponding metadata field or are skipped altogether.

Metadata mappings can be shared between sources.

Values in a metadata CSV can also be different.
The optional `metadata_value_mapping` maps Kukur metadata field values to values as they appear in a source.

Example:

```toml
[source.<name>]
metadata_value_mapping = "example_value_mapping"

[metadata_value_mapping.example_value_mapping."interpolation type"]
LINEAR = "linear"
STEPPED = "stepped"

[metadata_value_mapping.example_value_mapping."data type"]
FLOAT64 = ["int16", "int32"]
```

In this example,
when the `interpolation type` column contains the value `linear`,
Kukur will interpret it as the expected uppercase `LINEAR`.
When the `data type` column contains either `int16` or `int32`,
Kukur will interpret it as `FLOAT64`.

```csv
series name,interpolation type,data type
test-tag-1,linear,int32
```

`metadata_mapping` and `metadata_value_mapping` can be used together
to map wildly different metadata formats to a CSV supported by Kukur.

=== Quality

There is a possibility to add a quality column in the csv to represent the quality of the data point in the source, e.g. OPC quality code.
In this case a mapping needs to be provided.

Example:

```toml
[source.<name>]
quality_mapping = "example_opc_mapping"

[quality_mapping.example_opc_mapping]
GOOD = [192, 194, 197]

```
In this example we map the OPC quality of 192, 194 and 197 as a good quality point.

It is also possible to include ranges in the quality mapping.

Example:
```toml
[quality_mapping.example_opc_mapping]
GOOD = [[192], [194, 200]]
```
In this example we map the OPC quality of 192, and the range of 194-200 as a good quality point.

A quality column is not available for a csv with a pivot data model.
