// SPDX-FileCopyrightText: 2024 Timeseer.AI
// SPDX-License-Identifier: Apache-2.0

== Elasticsearch

Sources with `type = "elasticsearch"` configure https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html[Elasticsearch] sources.


```toml
[source.<name>]
type = "elasticsearch"
host = "localhost"
port = 9200
list_query = ""
metadata_query = ""
data_query = ""
tag_columns = []
field_columns = []
metadata_columns = []
metadata_field_column = ""
timestamp_column = ""
max_number_of_rows = 10000
metadata_mapping = ""
metadata_value_mapping = ""
```

`list_query`, `metadata_query` and `data_query` are required.

Currently  https://www.elastic.co/guide/en/elasticsearch/reference/current/esql.html[ES|QL] is supported.

`timestamp_column` is an optional parameter used to define the name
of the database column that contains timestamps for the series.
Defaults to `"ts"`.

Listing time series in Elasticsearch is supported only when the `tag_columns` and `field_columns` or `metadata_field_column` parameters are specified.

For example:

```toml
tag_columns = [
    "deviceId",
    "plant",
    "location",
]
```

Metadata columns can be defined as a list in the `metadata_columns` parameter.

For example:

```toml
metadata_columns = [
    "unit",
]
```

Field columns can be defined as a list in the `field_columns` parameter.

For example:

```toml
field_columns = [
    "temperature",
]
```

Columns in a metadata often do not match the names of metadata fields in Kukur.
An optional `metadata_mapping` maps Kukur field names to column names.

Example:

```toml
[source.<name>]
metadata_mapping = "example_metadata_mapping"

[metadata_mapping.example_metadata_mapping]
description = "DESCRIPTION"
unit = "ENG_UNITS"
```

Fields that are not included in the mapping,
such as `functional lower limit` in the example,
translate to the corresponding metadata field or are skipped altogether.

Metadata mappings can be shared between sources.

Values in a metadata column can also be different.
The optional `metadata_value_mapping` maps Kukur metadata field values to values as they appear in a source.

Example:

```toml
[source.<name>]
metadata_value_mapping = "example_value_mapping"

[metadata_value_mapping.example_value_mapping."interpolation type"]
LINEAR = "linear"
STEPPED = "stepped"

[metadata_value_mapping.example_value_mapping."data type"]
FLOAT64 = ["int16", "int32"]
```

In this example,
when the `interpolation type` column contains the value `linear`,
Kukur will interpret it as the expected uppercase `LINEAR`.
When the `data type` column contains either `int16` or `int32`,
Kukur will interpret it as `FLOAT64`.

`metadata_mapping` and `metadata_value_mapping` can be used together
to map wildly different metadata formats to a format supported by Kukur.
