// SPDX-FileCopyrightText: 2021 Timeseer.AI
// SPDX-License-Identifier: Apache-2.0

== Time Series Sources

Parameters common to all data sources are documented here.

```toml
[source.<name>]
type = "<the type of the source>"
query_retry_count = 0 # number of retries
query_retry_delay = 1.0 # seconds between retries as float
metadata_type = "<the type of the metadata source>"
metadata_sources = [] # names of additional metadata sources
data_query_interval_seconds = 123456 # <number of seconds>
# ...
```

Each source has a name.
When multiple sources with the same name are configured, the last configured one wins.

`type` specifies the type of the data source for this source.
Valid values are:

- `adodb`
- `arrows`
- `azure-data-explorer`
- `cratedb`
- `csv`
- `delta`
- `elasticsearch`
- `feather`
- `influxdb`
- `kukur`
- `oledb`
- `parquet`
- `piwebapi-da`
- `plugin`
- `postgresql`
- `redshift`
- `sqlite`

`type` is required.

`metadata_type` specifies the type of the metadata source for this source.

Valid values are:

- `adodb`
- `cratedb`
- `csv`
- `datafusion`
- `elasticsearch`
- `json`
- `kukur`
- `oledb`
- `piwebapi-da`
- `plugin`
- `postgresql`
- `redshift`
- `sqlite`

`metadata_type` is optional.
The `type` is used when not specified.

Additional metadata can be loaded from other sources as described in the section "Metadata Sources".
When multiple sources return an entry for the same metadata field, the source that occurs first in this list
gets priority.
Metadata returned by the source itself or by the `metadata` type configuration takes precendence over any additional sources configured here.

`query_retry_count` and `query_retry_delay` allow retrying all queries to a source in case of failure.
By default no requests will be retried.
`query_retry_delay` accepts floating point numbers,
for example `query_retry_delay = 0.5` will wait for 0.5 second after the first failure and between subsequent retries.

`data_query_interval_seconds` defines the maximum duration of the interval in which data is queried in one request.
A longer query is split in intervals of this length and later on reassembled.
This prevents query timeouts or works around a maximum number of points that can be returned by a source.

Example:

```toml
[source.sql]
type = "odbc"
connection_string = "..."
metadata_query = "..."
metadata_columns = [] # ...
data_query = "..."
data_query_interval_seconds = 86400
```

This ensures that queries will at most query for one day of data.

`data_query_interval_seconds` is optional.

== Metadata Sources

Metadata sources provide extra metadata for series in time series sources.
All time series sources that provide metadata can be used as a metadata source.
They accept the same configuration parameters as the time series source.

The optional `fields` parameter specifies which metadata fields will be used from the given source.

Possible metadata fields are:

include::{include-path}/metadata-fields.asciidoc[]

Example:

```toml
[source.noaa]
type = "influxdb"
database = "NOAA_water_database"
metadata_sources = ["noaa"]

[metadata.noaa]
type = "csv"
metadata = "examples/influxdb/noaa-metadata.csv"
fields = ["lower limit", "upper limit"]
```

Note that sources that are fast when listing all time series in the source by returning metadata in the same query,
will need to do an additional query to each of the configured metadata sources for each time series in the source.

== Quality

There is a possibility, for some types of sources, to add a quality column in the source file that represents the quality of the data point in the source, e.g. OPC quality code.

In this case a mapping needs to be provided.

Example:

```toml
[source.<name>]
quality_mapping = "example_mapping"

[quality_mapping.example_mapping]
GOOD = [192, 194, 197]

```
In this example we map the OPC quality of 192, 194 and 197 defined in the source as a good quality point in Kukur.

It is also possible to include ranges in the quality mapping.

Example:

```toml
[quality_mapping.example_mapping]
GOOD = [[192], [194, 200]]
```
In this example we map the OPC quality of 192, and the range of 194-200 defined in the source as a good quality point in Kukur.

If string values are used in the source, similar configuration can be used.

Example:

```toml
[quality_mapping.example_mapping]
GOOD = ["GoodQuality", "ExcellentQuality"]
```
In this example we map the "GoodQuality" and "ExcellentQuality" defined in the source as a good quality point in Kukur.

== Supported Sources

Multiple types of time series sources are supported:

ifndef::sources[]
- link:adodb.asciidoc[ADODB] connections (including OLEDB)
- link:arrows.asciidoc[Apache Arrow IPC Streaming] files
- link:feather.asciidoc[Apache Feather] files
- link:parquet.asciidoc[Apache Parquet] files
- link:azure_data_explorer.asciidoc[Azure Data Explorer] tables
- Binary link:plugin.asciidoc[Plugins]
- link:csv.asciidoc[CSV] files
- link:delta.asciidoc[Delta Lake] tables
- link:elasticsearch.asciidoc[Elasticsearch] data sources
- link:influxdb.asciidoc[InfluxDB] data sources
- Kukur link:json.asciidoc[JSON] metadata files
- Other link:kukur.asciidoc[Kukur or Timeseer instances]
- link:odbc.asciidoc[ODBC] data sources
- link:piwebapi-da.asciidoc[PI Data Archive] using PI Web API
- link:postgresql.asciidoc[PostgreSQL] databases
- link:redshift.asciidoc[Redshift] data warehouses
- link:sqlite.asciidoc[SQLite] databases

Source-specific parameters are documented in the linked documents.
endif::sources[]

ifdef::sources[]
- <<ADODB>> connections (including OLEDB)
- <<Apache Arrow IPC Streaming>> files
- <<Apache Feather>> files
- <<Apache Parquet>> files
- <<Azure Data Explorer>> tables
- Binary <<Plugin>>s
- <<CrateDB>> databases
- <<CSV>> files
- <<Delta Lake>> tables
- <<Elasticsearch>> databases
- <<InfluxDB>> databases
- Kukur <<JSON>> metadata files
- Other <<Kukur,Kukur or Timeseer instances>>
- <<ODBC>> data sources
- <<PI Data Archive using Web API>>
- <<PostgreSQL>> databases
- <<Redshift>> data warehouses
- <<SQLite>> databases

Source-specific parameters are documented in the linked sources reference.
endif::sources[]
