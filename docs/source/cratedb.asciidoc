// SPDX-FileCopyrightText: 2022 Timeseer.AI
// SPDX-License-Identifier: Apache-2.0

== CrateDB

Sources with `type = "cratedb"` configure https://crate.io/[CrateDB] sources.

CrateDB support requires the https://pypi.org/project/crate/[crate] Python package.

The connection string and queries can either be configured in the configuration file,
or loaded from files.
Inline configuration takes precedence over file-based configuration when both are provided.

```toml
[source.<name>]
type = "cratedb"
connection_string = "<cratedb connection_string>"
connection_string_path = "<path to connection string>"
query_string_parameters = false
list_query = "<query to list all time series in a source>"
list_query_path = "<path to list_query>"
list_columns = ["<metadata type of column 1>", "<metadata type of column 2"]
tag_columns = ["series name"]
field_columns = []
metadata_query = "<query for metadata of one series>"
metadata_query_path = "<path to metadata query>"
metadata_columns = ["<metadata type of column 1>", "<metadata type of column 2"]
dictionary_query = "<query for dictionary mappings>"
dictionary_query_path = "<path to the dictionary query>"
metadata_value_mapping = "<metadata_value_mapping name>"
data_query = "<query for data of one series in time range>"
data_query_path = "<path to data query>"
data_query_datetime_format = "<strftime format>"
data_query_timezone = "<override or specify time zone of timestamps to send a naive timestamp to the crate client>"
data_timezone = "<override or specify time zone of timestamps returned by the crate client>"
enable_trace_logging = false
quality_mapping = "<name>"
```

Example here use the following schema:

```sql
create table Data (
    timestamp timestamp with time zone,
    name text,
    value double precision,
    unit text
)
```

This assumes only one unit is ever present per time series.

=== Connection

The `connection_string` contains the provider and various options.

```toml
connection_string = "localhost:4200"
```

Alternatively, `connection_string_path` can point to a file that contains the connection string.
Whitespace at the start and end of the connection string file is removed.

Version 0.26 of the crate client does not support parameter binding for timestamps with timezones.
Set `query_string_parameters` to `true` to work around this.

Use `{}` to format parameters into queries.
In queries with multiple parameters, the order can be changed by using the argument position: `{1} {2} {0}`.
Use a read-only connection with a minimal amount of privileges as https://owasp.org/www-community/attacks/SQL_Injection[SQL Injection] are possible in that case and cannot be prevented by Kukur.

=== Search

The `list_query` is optional.
It returns a list of time series names found in the source.
When provided, it does not need a series to have been used in another context before it can be analyzed.

```toml
list_query = "select distinct name from Data"
```

The query can be read from a file by using `list_query_path` instead of `list_query`.

The query can either return only series names or all metadata.
When it returns all metadata, include a `list_columns` entry that describes all columns:

```toml
list_query = "select distinct name, unit from Data"
list_columns = ["series name", "unit"]
```

All columns defined in `tag_columns` should be included in `list_columns`.
All combinations of rows returned by the `list_query` and values in `field_columns`
define a series.

Built-in metadata columns are:

- `series name` (required)
include::{include-path}/metadata-fields.asciidoc[]

Custom metadata fields can be defined by including them in the `list_columns` list.

Not all CrateDB sources can map metadata field values to the values expected by Kukur.
Use `metadata_value_mapping` to convert them.

Example:

```toml
[source.<name>]
metadata_value_mapping = "crate_lowercase"

[metadata_value_mapping.crate_lowercase."data type"]
FLOAT64 = "float64"
STRING = ["string", "text", "varchar"]
DICTIONARY = "dictionary"
```

This example converts lowercase data types to the uppercase strings expected by Kukur.

=== Metadata

The `metadata_query` is a query that accepts one parameter for each tag in a series,
ordered by `tag_columns`.

```toml
metadata_query = "select unit from Data where name = '{}'"
```

The columns in the result set should be mapped to a supported type of metadata.
The `metadata_columns` entry contains a list with the positional mapping.

```toml
metadata_columns = [ "unit"]
```

Built-in types of metadata are:

include::{include-path}/metadata-fields.asciidoc[]

Custom metadata fields can be defined by including them in the `metadata_columns` list.

The metadata query can be read from a file by using `metadata_query_path` instead of `metadata_query`.

Metadata values can be converted using `metadata_value_mapping`.

Example:

```toml
[source.<name>]
metadata_value_mapping = "crate_lowercase"

[metadata_value_mapping.crate_lowercase."data type"]
FLOAT64 = "float64"
STRING = ["string", "text", "varchar"]
DICTIONARY = "dictionary"
```

This example converts lowercase data types to the uppercase strings expected by Kukur.

If the configuration defines `tag_columns`,
they are provided in the same order as defined in `tag_columns`.

```toml
[source.<name>]
tag_columns = ["location", "plant"]
```

```toml
metadata_query = """
select description, units, interpolationType, dataType, dictionaryName
from Metadata
where my_location = '{}' and my_plant = '{}'
"""
```

=== Dictionary

A dictionary maps numerical (integer) values to textual labels.
The `dictionary query` is a query that accepts one parameter: the name of the dictionary.

The dictionary name for a series is returned by the `dictionary name` list or metadata column.

The query should return rows of two columns:

- the numerical value that occurs in the data, in a type that can be converted to an integer
- the label for the numerical value (as `adBSTR`)

The dictionary query can be read from a file by using `dictionary_query_path` instead of `dictionary_query`.

=== Data

The `data_query` is a query that accepts three parameters:

- the name of the series (as text)
- the start date of the time range to query data (as text)
- the end date of the time range to query data (as text)

```toml
data_query = "select timestamp, value from Data where name = '{}' and timestamp >= '{}' and timestamp < '{}'"
```

This query should return rows of two columns:

- the timestamp of the data point
- the value of the data point

It will try to convert columns to the expected type.

The data query can be read from a file by using `data_query_path` instead of `data_query`.

The `data_query_datetime_format` option allows queries using a custom datetime format.
It accepts the https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior[formatting options] supported by Python.

Example:

```toml
data_query_datetime_format = "%Y-%m-%dT%H:%M:%S%z"
```

This converts timestamps to the ISO8601 format.

If timestamps without a time zone are used in the database,
convert the timestamp with the `data_query_timezone` option.
The request will use the converted timestamps as naive timestamps for all queries.

Example:

```toml
data_query_timezone = "UTC"
```

If the query returns timestamps without a time zone,
the time zone can be specified by the `data_timezone` option.

Example:

```toml
data_timezone = "UTC"
```

The exact available time zones are system-dependent.

Set `enable_trace_logging` to `true` to log the fetched data before conversion.

```toml
enable_trace_logging = true
```

If the configuration defines `tag_columns`,
they are provided in the same order as defined in `tag_columns`.

```toml
[source.<name>]
tag_columns = ["location", "plant"]
```

```toml
data_query = """
select timestamp, value
from Data
where my_location = '{}' and my_plant = '{}' and timestamp >= '{}' and timestamp < '{}'
"""
```

If the configuration defines `field_columns`,
the field is available as `{field}` in the `data_query`.

```toml
[source.<name>]
field_columns = ["temperature", "pressure"]
```

```toml
data_query = """
select timestamp, {field},
from Data
where name = '{}' and timestamp >= '{}' and timestamp < '{}'
"""
```

=== Quality

There is a possibility to add a quality column.

In this case the data query changes:

```toml
data_query = "select timestamp, value, quality from Data where name = '{}' and timestamp >= '{}' and timestamp < '{}'"
```

Where `quality` represents the column that contains the data point quality.

Check the
ifdef::sources[]
<<Quality, source documentation>>
endif::sources[]
ifndef::sources[]
link:sources.asciidoc#Quality[source documentation]
endif::sources[]
to configure the mapping of a value in the quality column to a quality status known to Kukur.
